<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/02/01/%E7%AE%97%E6%B3%95or%E4%BE%8B%E9%A2%98/"/>
    <url>/blog/2025/02/01/%E7%AE%97%E6%B3%95or%E4%BE%8B%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="用栈解决括号配对问题"><a href="#用栈解决括号配对问题" class="headerlink" title="用栈解决括号配对问题"></a>用栈解决括号配对问题</h1><h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><ol><li><strong>大根堆</strong></li><li><strong>小根堆</strong></li></ol><h2 id="用数组实现"><a href="#用数组实现" class="headerlink" title="用数组实现"></a>用数组实现</h2><p>- </p><ul><li>parent：i     or   (j-1)&#x2F;2</li><li>child:   2i+1  or     j</li><li>child:   2i+2  or     j</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>上滤:用于将新元素插入堆中</li><li>下滤:调整破坏堆的元素</li></ul><h4 id="建堆法"><a href="#建堆法" class="headerlink" title="建堆法"></a>建堆法</h4><ul><li>自上而下</li></ul><blockquote><p>O(logN)</p></blockquote><ul><li>自下而上</li></ul><blockquote><p>更快:O(N)</p></blockquote><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li>优先队列:弹出最小元素</li></ul><blockquote><p>用小根堆,其根即为最小元素直接弹出</p><p>(恢复小根堆)弹出后将最后一个元素放到根节点再下滤</p></blockquote><p>[b站视频](<a href="https://www.bilibili.com/video/BV1AF411G7cA/?vd_source=5856fddb1be6b3f4f3c174afd32a0d43">【从堆的定义到优先队列、堆排序】 10分钟看懂必考的数据结构——堆_哔哩哔哩_bilibili</a>)</p><h5 id="例题-1705-吃苹果的最大数目-力扣（LeetCode）"><a href="#例题-1705-吃苹果的最大数目-力扣（LeetCode）" class="headerlink" title="[**例题**](1705. 吃苹果的最大数目 - 力扣（LeetCode）):"></a>[**例题**](<a href="https://leetcode.cn/problems/maximum-number-of-eaten-apples/descrjiption/?envType=daily-question&envId=2024-12-28">1705. 吃苹果的最大数目 - 力扣（LeetCode）</a>):</h5><p>有一棵特殊的苹果树，一连 <code>n</code> 天，每天都可以长出若干个苹果。在第 <code>i</code> 天，树上会长出 <code>apples[i]</code> 个苹果，这些苹果将会在 <code>days[i]</code> 天后（也就是说，第 <code>i + days[i]</code> 天时）腐烂，变得无法食用。也可能有那么几天，树上不会长出新的苹果，此时用 <code>apples[i] == 0</code> 且 <code>days[i] == 0</code> 表示。</p><p>你打算每天 <strong>最多</strong> 吃一个苹果来保证营养均衡。注意，你可以在这 <code>n</code> 天之后继续吃苹果。</p><p>给你两个长度为 <code>n</code> 的整数数组 <code>days</code> 和 <code>apples</code> ，返回你可以吃掉的苹果的最大数目*。*</p><p><strong>示例 1：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">j输入：apples = [1,2,3,5,2], days = [3,2,1,4,2]<br>输出：7<br>解释：你可以吃掉 7 个苹果：<br><span class="hljs-bullet">- </span>第一天，你吃掉第一天长出来的苹果。<br><span class="hljs-bullet">- </span>第二天，你吃掉一个第二天长出来的苹果。<br><span class="hljs-bullet">- </span>第三天，你吃掉一个第二天长出来的苹果。过了这一天，第三天长出来的苹果就已经腐烂了。<br><span class="hljs-bullet">- </span>第四天到第七天，你吃的都是第四天长出来的苹果。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">输入：apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]<br>输出：5<br>解释：你可以吃掉 5 个苹果：<br><span class="hljs-bullet">- </span>第一天到第三天，你吃的都是第一天长出来的苹果。<br><span class="hljs-bullet">- </span>第四天和第五天不吃苹果。<br><span class="hljs-bullet">- </span>第六天和第七天，你吃的都是第六天长出来的苹果。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>apples.length == n</code></li><li><code>days.length == n</code></li><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>0 &lt;= apples[i], days[i] &lt;= 2 * 104</code></li><li>只有在 <code>apples[i] = 0</code> 时，<code>days[i] = 0</code> 才成立</li></ul><h5 id="题解"><a href="#题解" class="headerlink" title="题解:"></a><strong>题解</strong>:</h5><p>贪心思路很容易想到，就是每次都吃最快要腐烂的水果。<br>所以用优先队列也就是堆进行腐烂时间的维护。对于堆顶水果批次如果苹果没了或者腐烂了。那么就pop掉。<br>否则就苹果数量减一就可以了。<br>代码封装得很漂亮嗷</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> apples;<br>    <span class="hljs-type">int</span> days;<br>&#125;Heap;<br><br>Heap** heap;<br><span class="hljs-type">int</span> heapSize;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>  b)</span><br>&#123;<br>    Heap* tmp = heap[a];<br>    heap[a] = heap[b];<br>    heap[b] = tmp;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Adjustdown_heap</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> parents = <span class="hljs-number">1</span>;        <span class="hljs-comment">//下滤。 parents为1</span><br>    <span class="hljs-type">int</span> child = <span class="hljs-number">2</span>*parents;<br>    <span class="hljs-keyword">while</span> ( child &lt; heapSize )<br>    &#123;<br>        <span class="hljs-keyword">if</span> ( child+<span class="hljs-number">1</span>&lt;heapSize &amp;&amp; heap[child+<span class="hljs-number">1</span>]-&gt;days &lt; heap[child]-&gt;days)&#123;<br>            child++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( heap[child]-&gt;days &gt; heap[parents]-&gt;days ) <span class="hljs-keyword">break</span>;<br>        swap(child,parents);<br>        parents = child;<br>        child = <span class="hljs-number">2</span>*parents;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Adjustup_heap</span><span class="hljs-params">()</span><span class="hljs-comment">//上滤</span><br>&#123;<br>    <span class="hljs-type">int</span> child = heapSize<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> parents = child/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">while</span> ( parents &gt; <span class="hljs-number">0</span> )<br>    &#123;<br>        <span class="hljs-keyword">if</span> ( heap[child]-&gt;days &gt; heap[parents]-&gt;days ) <span class="hljs-keyword">break</span>;<br>        swap(child,parents);<br>        child = parents;<br>        parents = child/<span class="hljs-number">2</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pop_heap</span><span class="hljs-params">()</span><span class="hljs-comment">//弹出最小根,将最后一个元素放在弹出位置并下滤</span><br>&#123;<br>    heap[<span class="hljs-number">1</span>] = heap[heapSize<span class="hljs-number">-1</span>];<br>    heapSize--;<br>    Adjustdown_heap();<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_heap</span><span class="hljs-params">(<span class="hljs-type">int</span> apples, <span class="hljs-type">int</span> days)</span><span class="hljs-comment">//增加根并上滤</span><br>&#123;<br>    Heap* new = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Heap));<br>    new-&gt;apples = apples;<br>    new-&gt;days = days;<br>    heap[heapSize++] = new;<br>    Adjustup_heap();<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">empty_heap</span><span class="hljs-params">()</span><span class="hljs-comment">//堆是否为空</span><br>&#123;<br>    <span class="hljs-keyword">return</span> heapSize &lt;= <span class="hljs-number">1</span>;<br>&#125;<br><br>Heap* <span class="hljs-title function_">getTop_heap</span><span class="hljs-params">()</span><span class="hljs-comment">//获取最小根</span><br>&#123;<br>    <span class="hljs-keyword">return</span> heap[<span class="hljs-number">1</span>];<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">eatenApples</span><span class="hljs-params">(<span class="hljs-type">int</span>* apples, <span class="hljs-type">int</span> applesSize, <span class="hljs-type">int</span>* days, <span class="hljs-type">int</span> daysSize)</span>&#123;<br>    <span class="hljs-comment">//用产生的苹果和天数的取小值来表示未来的n天中你都有苹果可以吃。</span><br>    <span class="hljs-comment">//维护这个n值就可以了，最后再把剩余的n给加上去</span><br>    <span class="hljs-comment">//上述思路有个bug:那就是吃的苹果是按照顺序过来的。而不考虑腐烂时间。所以导致后来的苹果快腐烂而没吃到</span><br><br>    <span class="hljs-comment">//所以这个题目就必须得用贪心思想了。首先要改变一下day数组。将其含义表示成在第i天开始腐烂。</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-comment">//天数</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;daysSize; k++)<br>    &#123;<br>        days[k] += k;      <span class="hljs-comment">//将天数改为腐烂日期      </span><br>    &#125;<br><br>    heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Heap*)*(applesSize+<span class="hljs-number">1</span>));<br>    heapSize = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">//模拟过程.每天加入一批苹果.过了腐烂天数的就置零.没有腐烂的就从快要腐烂的中挑出一个苹果吃掉.</span><br>    <span class="hljs-keyword">while</span>( i &lt; daysSize || !empty_heap() )   <span class="hljs-comment">//天数未到或者堆不空.</span><br>    &#123;         <br>        <span class="hljs-keyword">if</span> ( i &lt; daysSize ) add_heap(apples[i],days[i]);       <span class="hljs-comment">//加入新的一批苹果.</span><br>        <span class="hljs-keyword">while</span> ( !empty_heap() &amp;&amp; ( getTop_heap()-&gt;days &lt;= i || getTop_heap()-&gt;apples &lt;= <span class="hljs-number">0</span>) )<br>        &#123;<br>            pop_heap();                               <span class="hljs-comment">//清理堆中腐烂的水果和没有水果的批次</span><br>        &#125;<br>        i++;<br>        <span class="hljs-keyword">if</span> ( empty_heap() ) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            (getTop_heap()-&gt;apples)--;                <span class="hljs-comment">//吃最快要腐烂的苹果</span><br>        ans++;<br>        &#125;<br>    &#125;   <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我的做法：最好把新增的苹果放在烂之前吃，但这样可能会导致较后时间的苹果重复而较前时间没苹果吃，将时间从后往前推，重复则跳过</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> max 40000</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">eatenApples</span><span class="hljs-params">(<span class="hljs-type">int</span>* apples, <span class="hljs-type">int</span> applesSize, <span class="hljs-type">int</span>* days, <span class="hljs-type">int</span> daysSize)</span> <br>&#123;<br><br>    <span class="hljs-type">int</span> n=applesSize;<br><br>    <span class="hljs-type">int</span> Day[max+<span class="hljs-number">1</span>];<br>    <span class="hljs-built_in">memset</span>(Day,<span class="hljs-number">0</span>,<span class="hljs-keyword">sizeof</span>(Day));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+days[i]<span class="hljs-number">-1</span>;j&gt;=i;j--)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(apples[i]&gt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(Day[j]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    apples[i]--;<br>                    Day[j]=<span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=max;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(Day[i]==<span class="hljs-number">1</span>)count++;<br>    &#125;<span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="scanf-读单词"><a href="#scanf-读单词" class="headerlink" title="scanf 读单词"></a>scanf 读单词</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]%*c&quot;</span>, students[i].name);<br><span class="hljs-comment">//%[^\n] 读取所有字符，直到遇到换行符 \n。</span><br><span class="hljs-comment">//%*c 读取换行符 \n，但不会将其存储到任何变量中。</span><br></code></pre></td></tr></table></figure><h1 id="读多个数字并以-n为结束标志符"><a href="#读多个数字并以-n为结束标志符" class="headerlink" title="读多个数字并以\n为结束标志符"></a>读多个数字并以\n为结束标志符</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-type">char</span> temp[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> num[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>fgets(temp,<span class="hljs-keyword">sizeof</span>(temp),<span class="hljs-built_in">stdin</span>);<br><span class="hljs-type">char</span>*token=strtok(temp,<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">while</span>(token!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>    num[len++]=atoi(token);<br>    token=strtok(<span class="hljs-literal">NULL</span>,<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/blog/2025/02/01/c%E8%AF%AD%E9%9F%B3%E7%AC%94%E8%AE%B0/"/>
    <url>/blog/2025/02/01/c%E8%AF%AD%E9%9F%B3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p> [TOC]</p><h1 id="double的存储方式"><a href="#double的存储方式" class="headerlink" title="double的存储方式"></a>double的存储方式</h1><p>64位：1符号，11指数，52小数  </p><p>注：</p><ul><li>指数有1023偏移量，如指数6储存为1029</li><li>52小数节省了一位整数1位1，因为第一位必为1</li></ul><p>e.g.:</p><p>0 10000000101 1001000000000000000000000000000000000000000000000000</p><p>10000000101-&gt;1029-&gt;6</p><p>10010000…..-&gt;1.10010000..j…-&gt;1.1001000….*2^6-&gt;110010-&gt;100</p><p>float同理：1符号，8指数，23小数，128偏移</p><h1 id="typedef-关键字"><a href="#typedef-关键字" class="headerlink" title="typedef 关键字"></a>typedef 关键字</h1><p>为某一数据类型起&#x3D;&#x3D;别名&#x3D;&#x3D;</p><p>格式与定义或声明一数据类型相同</p><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*POINT)</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-type">int</span>)</span>;<br>POINT a;<br></code></pre></td></tr></table></figure><h1 id="printf-控制格式"><a href="#printf-控制格式" class="headerlink" title="printf 控制格式"></a>printf 控制格式</h1><h4 id="1-宽度控制"><a href="#1-宽度控制" class="headerlink" title="1. 宽度控制"></a>1. 宽度控制</h4><ul><li>使用 <code>%nd</code> 指定输出的最小宽度，不足时用空格填充。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%5d\n&quot;</span>, <span class="hljs-number">42</span>);  <span class="hljs-comment">// 输出:    42</span><br></code></pre></td></tr></table></figure><h4 id="2-精度控制"><a href="#2-精度控制" class="headerlink" title="2. 精度控制"></a>2. 精度控制</h4><ul><li>使用 <code>%.nf</code> 控制浮点数的输出精度。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2f\n&quot;</span>, <span class="hljs-number">3.14159</span>);  <span class="hljs-comment">// 输出: 3.14</span><br></code></pre></td></tr></table></figure><h4 id="3-左对齐"><a href="#3-左对齐" class="headerlink" title="3. 左对齐"></a>3. 左对齐</h4><ul><li>使用 <code>%-nd</code> 使输出左对齐。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-5d\n&quot;</span>, <span class="hljs-number">42</span>);  <span class="hljs-comment">// 输出: 42   </span><br></code></pre></td></tr></table></figure><h4 id="4-前导零填充"><a href="#4-前导零填充" class="headerlink" title="4. 前导零填充"></a>4. 前导零填充</h4><ul><li>使用 <code>%0nd</code> 在数字前填充零。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%05d\n&quot;</span>, <span class="hljs-number">42</span>);  <span class="hljs-comment">// 输出: 00042</span><br></code></pre></td></tr></table></figure><h4 id="5-混合使用"><a href="#5-混合使用" class="headerlink" title="5. 混合使用"></a>5. 混合使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%-10.2f\n&quot;</span>, <span class="hljs-number">3.14159</span>);  <span class="hljs-comment">// 输出: 3.14      </span><br></code></pre></td></tr></table></figure><h1 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>*p=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(*p,n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-built_in">memcpy</span>+<span class="hljs-built_in">malloc</span><br><br><br><span class="hljs-type">int</span>*p=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>  <span class="hljs-built_in">free</span>(p);<br><br><span class="hljs-type">int</span> *p=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">calloc</span>(n*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>  <span class="hljs-built_in">free</span>(p); **区别：<span class="hljs-built_in">calloc</span>会将内存初始化为<span class="hljs-number">0</span>**<br>      <br><br><span class="hljs-type">void</span> *<span class="hljs-title function_">memset</span><span class="hljs-params">(<span class="hljs-type">void</span> *str, <span class="hljs-type">int</span> c, <span class="hljs-type">size_t</span> n)</span>——给字符数组前个n个字符赋值为c<br></code></pre></td></tr></table></figure><p><img src="https://xxx.ilovefishc.com/forum/201802/05/024739vxsh77pvaeye7sbd.png" alt="img">在C语言中，程序的内存布局通常分为以下几个部分：</p><ol><li><p><strong>文本段（Text Segment）</strong>：</p><ul><li>也称为代码段（Code Segment）。</li><li>包含程序的机器代码，即&#x3D;&#x3D;函数&#x3D;&#x3D;和&#x3D;&#x3D;指令&#x3D;&#x3D;。</li><li>这个段是只读的，用于防止程序修改自己的代码。</li><li>多个进程可以共享这个段，以节省内存。</li></ul></li><li><p><strong>数据段（Data Segment）</strong>：</p><ul><li>包含&#x3D;&#x3D;已初始化的全局变量&#x3D;&#x3D;和&#x3D;&#x3D;静态变量&#x3D;&#x3D;。</li><li>这个段又分为：<ul><li><strong>已初始化的数据区（Initialized Data Section）</strong>：包含已初始化的全局变量和静态变量。</li><li><strong>未初始化的数据区（Uninitialized Data Section）</strong>，也称为BSS段（Block Started by Symbol）：包含&#x3D;&#x3D;未初始化的全局变量&#x3D;&#x3D;和&#x3D;&#x3D;静态变量&#x3D;&#x3D;，这些变量在程序运行前被初始化为0。</li></ul></li></ul></li><li><p><strong>堆（Heap）</strong>：</p><ul><li>是程序在运行时动态分配内存的区域。</li><li>通过<code>malloc</code>、<code>calloc</code>、<code>realloc</code>等函数分配内存。</li><li>堆的内存管理由程序员负责，容易出现内存泄漏等问题。</li><li>堆的内存地址通常低于栈的内存地址，并且向上增长。</li></ul></li><li><p><strong>栈（Stack）</strong>：</p><ul><li>用于存储&#x3D;&#x3D;局部变量&#x3D;&#x3D;和函数调用的上下文（如&#x3D;&#x3D;返回地址、参数&#x3D;&#x3D;等）。</li><li>栈是自动管理的，遵循“先进后出”（LIFO）的原则。</li><li>每个线程都有自己的栈。</li><li>栈的内存地址通常低于堆的内存地址，并且向下增长。</li></ul></li><li><p><strong>未使用区域（Unused Memory）</strong>：</p><ul><li>程序运行时未使用的内存区域。</li></ul></li></ol><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>在C语言中，内存对齐是一个重要的概念。编译器为了提高访问效率，会按照一定的规则对变量进行对齐。对齐规则通常与处理器架构有关。例如，4字节对齐意味着变量的地址必须是4的倍数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>C语言程序的内存布局主要包括文本段、数据段、堆和栈。</p><h3 id="大小端存储"><a href="#大小端存储" class="headerlink" title="大小端存储"></a>大小端存储</h3><table><thead><tr><th align="left">特性</th><th align="left">小端模式（Little Endian）</th><th align="left">大端模式（Big Endian）</th></tr></thead><tbody><tr><td align="left"><strong>定义</strong></td><td align="left">最低有效字节存储在最低地址</td><td align="left">最高有效字节存储在最低地址</td></tr><tr><td align="left"><strong>示例</strong></td><td align="left"><code>0x12345678</code> 存储为 &#96;78 56 34 12</td><td align="left"><code>0x12345678</code> 存储为 <code>12 34 56 78</code></td></tr></tbody></table><h1 id="其他进制初始化"><a href="#其他进制初始化" class="headerlink" title="其他进制初始化:"></a>其他进制初始化:</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0xABC</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j = <span class="hljs-number">05274</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u %u&quot;</span>, i, j);<br><br></code></pre></td></tr></table></figure><p>结果: 2748 2748</p><p>开头：</p><p>0x：16进制</p><p>0：8进制</p><p>0b：2进制</p><p>输出：</p><table><thead><tr><th align="left">格式化占位符</th><th align="left">说明</th><th align="left">示例输出</th></tr></thead><tbody><tr><td align="left"><code>%o</code></td><td align="left">无前缀的八进制</td><td align="left"><code>5274</code></td></tr><tr><td align="left"><code>%#o</code></td><td align="left">带前缀 <code>0</code> 的八进制</td><td align="left"><code>05274</code></td></tr><tr><td align="left"><code>%x</code></td><td align="left">小写的无前缀十六进制</td><td align="left"><code>abc</code></td></tr><tr><td align="left"><code>%X</code></td><td align="left">大写的无前缀十六进制</td><td align="left"><code>ABC</code></td></tr><tr><td align="left"><code>%#x</code></td><td align="left">小写的带前缀 <code>0x</code> 的十六进制</td><td align="left"><code>0xabc</code></td></tr><tr><td align="left"><code>%#X</code></td><td align="left">大写的带前缀 <code>0X</code> 的十六进制</td><td align="left"><code>0XABC</code></td></tr></tbody></table><p>&#x3D;&#x3D;字符&#x3D;&#x3D;数组初始化</p><ul><li>八进制：\0 or 0</li><li>十六进制：\x or 0x</li></ul><h1 id="数组-指针"><a href="#数组-指针" class="headerlink" title="数组&amp;指针"></a>数组&amp;指针</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>strlwr(字符数组名)——直接对数组进行操作并返回该数组（化为小写）</p><p>strupr</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;  <span class="hljs-comment">// arr[0] = 1, arr[1] = 2, arr[2] = 0, arr[3] = 0, arr[4] = 0</span><br></code></pre></td></tr></table></figure><h2 id="特殊用法"><a href="#特殊用法" class="headerlink" title="特殊用法"></a>特殊用法</h2><ul><li>2[a]&lt;&#x3D;&gt;a[2]</li><li>p1[-1][2]&lt;&#x3D;&gt;(-1)[p1][2]</li></ul><h1 id="作用域和链接属性"><a href="#作用域和链接属性" class="headerlink" title="作用域和链接属性"></a>作用域和链接属性</h1><h2 id="作用域和链接属性-1"><a href="#作用域和链接属性-1" class="headerlink" title="作用域和链接属性"></a>作用域和链接属性</h2><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>代码块作用域</p></li><li><p>文件作用域</p><ul><li>全局变量</li><li>函数名</li></ul><blockquote><p>从声明到结尾都可以访问</p></blockquote></li><li><p>原型作用域（不重要）</p><ul><li>函数声明时的参数</li></ul></li><li><p>函数作用域（不重要）</p><ul><li>适用goto</li></ul></li></ul><h3 id="定义和声明"><a href="#定义和声明" class="headerlink" title="定义和声明"></a>定义和声明</h3><p>其他地方定义过的具有external属性的标识符在其他文件中可进行声明来访问</p><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> num；<br></code></pre></td></tr></table></figure><h3 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h3><ul><li>external<ul><li>多个文件中声明的同名标识符表示一个实体</li></ul></li><li>internal<ul><li>单个文件中声明的同名标识符表示一个实体</li></ul></li><li>none<ul><li>声明的标识符被当作独立不同实体</li></ul></li></ul><p>只有具备文件作用域的标识符才有external或internal链接属性且默认external<strong>而使用static关键字可使external变internal</strong></p><p>其他都是none</p><h2 id="生存期和储存类型"><a href="#生存期和储存类型" class="headerlink" title="生存期和储存类型"></a>生存期和储存类型</h2><h3 id="生存期"><a href="#生存期" class="headerlink" title="生存期"></a>生存期</h3><ul><li>静态存储期（程序关闭时释放内存）<ul><li>具有文件作用域的变量</li></ul></li><li>自动存储期（代码块结束释放内存）<ul><li>具有代码块作用域的变量</li></ul></li></ul><h3 id="存储类型"><a href="#存储类型" class="headerlink" title="存储类型"></a>存储类型</h3><ul><li>auto</li><li>register（建议放在寄存器（访问很快）中，若没放进去就是auto,放进寄存器后不允许取地址）</li><li>static<ul><li>改变生存期，不改变作用域，将external链接属性改为internal</li></ul></li><li>extern<ul><li>用于声明定义过且在位于链接范围内的变量或函数</li></ul></li><li>typedef</li></ul><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>变量类型</th><th>生命周期</th><th>作用域</th><th>链接属性</th></tr></thead><tbody><tr><td>全局变量&#x2F;函数</td><td>static</td><td>文件作用域</td><td>external</td></tr><tr><td>局部变量（默认auto）</td><td>auto</td><td>块内</td><td>none</td></tr></tbody></table><table><thead><tr><th>存储类型</th><th>生命周期</th><th>作用域</th><th>链接属性</th><th>特点</th></tr></thead><tbody><tr><td><strong><code>auto（默认局部变量）</code></strong></td><td>（自动存储期）块内</td><td>块作用域</td><td>none</td><td>默认局部变量类型</td></tr><tr><td><strong><code>static</code></strong></td><td>（静态存储期）&#x3D;&#x3D;程序运行期间&#x3D;&#x3D;</td><td>块&#x2F;文件作用域</td><td>&#x3D;&#x3D;internal&#x3D;&#x3D;</td><td>静态变量保留值，可持久化局部状态或隐藏全局变量。</td></tr><tr><td><strong><code>extern</code></strong></td><td>（静态）程序运行期间</td><td>文件作用域</td><td>&#x3D;&#x3D;external&#x3D;&#x3D;</td><td>用于全局变量跨文件共享。</td></tr><tr><td><strong><code>register（约等于auto）</code></strong></td><td>（自动）块内</td><td>块作用域</td><td>none</td><td>&#x3D;&#x3D;不可取地址&#x3D;&#x3D;</td></tr></tbody></table><h1 id="宏定义（-define-upper-x）"><a href="#宏定义（-define-upper-x）" class="headerlink" title="宏定义（#define (upper)  x）"></a>宏定义（#define (upper)  x）</h1><ol><li>宏定义实际上是在进行“机械地替换”</li></ol><ul><li><p>如果要传参数，需要与被被宏定义标识符亲密接触</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) x*x<span class="hljs-comment">//参数与标识符亲密接触</span></span><br><span class="hljs-built_in">scanf</span>(......)<span class="hljs-comment">//输入x=5;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,SQUARE(x+<span class="hljs-number">1</span>))<span class="hljs-comment">//结果并非36而是5+1*5+1=11;(机械地替换)</span><br><span class="hljs-comment">//因此最好写成:#define SQUARE(x) ((x)*(x))</span><br></code></pre></td></tr></table></figure></li><li><p>#undef xxx 可终止宏定义的作用域</p></li></ul><ol start="2"><li>##&#x2F;&#x2F;记号连接运算符</li><li>#define   a(…)     #printf(…)&#x2F;&#x2F;好处1.去除多余空格和逗号，可变参数</li></ol><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>在函数定义和声明前加上：&#x3D;&#x3D;inline&#x3D;&#x3D;</p><p>内联函数可用于多次调用的函数，会将函数代码直接在调用函数的地方展开，用于节省时间，但编译会更久。</p><p>聪明的编译器会主动判断是否内联。</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><table><thead><tr><th align="left">操作</th><th align="left">示例代码</th></tr></thead><tbody><tr><td align="left">定义结构体</td><td align="left"><code>struct student &#123; ... &#125;;</code></td></tr><tr><td align="left">声明结构体变量</td><td align="left"><code>struct student stu1;</code></td></tr><tr><td align="left">初始化结构体</td><td align="left"><code>struct student stu1 = &#123;123456789, &quot;Alice&quot;, &#39;F&#39;, 2000, &#123;85, 90, 88, 92&#125;&#125;;</code></td></tr><tr><td align="left">访问成员</td><td align="left"><code>stu1.studentID = 123456789;</code></td></tr></tbody></table><table><thead><tr><th align="left">运算符</th><th align="left">用途</th><th align="left">示例代码</th></tr></thead><tbody><tr><td align="left">原点成员运算符（<code>.</code>）</td><td align="left">访问结构体实例变量的成员。</td><td align="left"><code>anna.id</code></td></tr><tr><td align="left">指针成员运算符（<code>-&gt;</code>）</td><td align="left">访问结构体&#x3D;&#x3D;指针&#x3D;&#x3D;变量的成员。</td><td align="left"><code>person-&gt;id</code></td></tr><tr><td align="left">结构体嵌套访问</td><td align="left">连续使用成员运算符访问嵌套成员。</td><td align="left"><code>anna.birthday.year</code></td></tr><tr><td align="left">优先级问题</td><td align="left">原点运算符优先级高于解引用，需用括号明确优先级。</td><td align="left"><code>(*person).id</code></td></tr></tbody></table><ul><li>相同类型的结构体可以用等号直接赋值：a&#x3D;b;</li><li>定义以结构体为参数的函数时，应该传入结构体变量的地址（否则实参会被拷贝到形参上，影响性能）</li><li>通常使用typedef来定义结构体的类型</li></ul><p>e.g.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">char</span> id[<span class="hljs-number">6</span>];<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125; Student;<span class="hljs-comment">//定义匿名结构体并给别名</span><br><br>Student anna, john, *person;<span class="hljs-comment">//声明,可省去&quot;struct&quot;</span><br></code></pre></td></tr></table></figure><h1 id="共同体-联合体"><a href="#共同体-联合体" class="headerlink" title="共同体&#x2F;联合体"></a>共同体&#x2F;联合体</h1><p>与结构体十分相似</p><p>但不能做函数参数，不能进行比较操作</p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>monday = <span class="hljs-number">1</span>, tuesday, wednesday, thursday, friday, saturday, sunday&#125; wdays;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> <br>&#123;<br>    wdays day = monday;<span class="hljs-comment">//仅仅为了增加代码可读性，可同:int day = monday; 代替</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Today is %d\n&quot;</span>, day);<span class="hljs-comment">//输出Today is 1</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><ul><li>释放链表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ListFree</span><span class="hljs-params">(NODE_PTR li)</span> <br>&#123;<br>    <span class="hljs-keyword">if</span> (li) <br>        &#123;<br>        NODE_PTR p = li-&gt;next;<br>        <span class="hljs-built_in">free</span>(li);<br>        ListFree(p);<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>计算链表长度</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">size_t</span> <span class="hljs-title function_">ListLength</span><span class="hljs-params">(NODE_PTR li)</span> <br>&#123;<br>    <span class="hljs-keyword">if</span> (li) <span class="hljs-keyword">return</span> ListLength(li-&gt;next) + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回索引值的链表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">NODE_PTR <span class="hljs-title function_">ListIndex</span><span class="hljs-params">(NODE_PTR li, <span class="hljs-type">size_t</span> Idx)</span> <br>&#123;<br>    <span class="hljs-keyword">if</span> (li &amp;&amp; Idx) <span class="hljs-keyword">return</span> ListIndex(li-&gt;next, --Idx);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> li;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>创建链表&#x2F;添加或移除元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//头插法</span><br><span class="hljs-comment">//头部插入一个数据为i的节点</span><br>NODE_PTR <span class="hljs-title function_">ListCreate</span><span class="hljs-params">(<span class="hljs-type">int</span> i, NODE_PTR li)</span> <br>&#123;<br>    NODE_PTR np = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));<br>    np-&gt;customerData = i;<br>    np-&gt;next = li;<br>    <span class="hljs-keyword">return</span> np;<br>&#125;<br><br><span class="hljs-comment">//删除头部一个节点</span><br>NODE_PTR <span class="hljs-title function_">ListRemove</span><span class="hljs-params">(NODE_PTR li)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (li)<br>    &#123;<br>        NODE_PTR p = li-&gt;next;<br>        <span class="hljs-built_in">free</span>(li);<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ol><li>有序的有重复的结构体数组中找出某个数的最左边的索引</li></ol><p>若没有则返回了最大索引值加一即数组长度：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">SearchIndex</span><span class="hljs-params">(Room* arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span> minSize)</span><br>&#123;<br>    <span class="hljs-comment">// 当 left 小于等于 right 时，继续循环</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right)<br>    &#123;<br>        <span class="hljs-comment">// 计算中间索引，避免直接相加可能导致的溢出</span><br>        <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>        <br>        <span class="hljs-comment">// 如果中间索引处的房间大小大于等于最小房间大小</span><br>        <span class="hljs-keyword">if</span> (arr[mid].roomSize &gt;= minSize)<br>        &#123;<br>            <span class="hljs-comment">// 将右边界移动到中间索引的左边，继续在左半部分查找</span><br>            right = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-comment">// 否则，将左边界移动到中间索引的右边，继续在右半部分查找</span><br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 返回左边界，此时 left 是第一个满足条件的房间的索引</span><br>    <span class="hljs-keyword">return</span> left;<br><br><br><span class="hljs-type">int</span> minIndex = SearchIndex(roomArr, <span class="hljs-number">0</span>, roomsSize - <span class="hljs-number">1</span>, minSize);<br><span class="hljs-comment">//如果遍历整个数组都没找到的话就跳过这次循环并将此位置的ret赋值为-1</span><br><span class="hljs-keyword">if</span> (minIndex == roomsSize)<br>&#123;<br>ret[i] = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/blog/2025/02/01/hello-world/"/>
    <url>/blog/2025/02/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
